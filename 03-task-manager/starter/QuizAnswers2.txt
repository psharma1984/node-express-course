In this lesson, you created a middleware function called asyncWrapper. Why? : To handle the try catch block of the async code we passed as a function parameter to it.
Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    return next(CustomAPIError(`No task with Id: ${taskID}`,404))
  }
  res.status(200).json({ task });
});